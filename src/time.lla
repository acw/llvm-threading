#define TIME_LLA
#include "system.llh"
#include "time.llh"

; INPUT: A pointer to a TimeSpec that should be standardized to meet normal
;        operating conventions.
; OUTPUT: None
; SIDE EFFECTS: The input TimeSpec will be overwritten with better values.
define void @standardizeTime(%TimeSpec* %time)
{
    %secp  = getelementptr %TimeSpec* %time, i32 0, TIMESPEC_FIELD_SECS
    %nsecp = getelementptr %TimeSpec* %time, i32 0, TIMESPEC_FIELD_NSECS
    br label %start

start:
    %nsecs = load i32* %nsecp
    %secs  = load i64* %secp
    %tooBg = icmp sge i32 %nsecs, 1000000000
    br i1 %tooBg, label %nsecTooBig, label %continue1

continue1:
    %tooSm = icmp sle i32 %nsecs, -1000000000
    br i1 %tooSm, label %nsecTooSmall, label %continue2

continue2:
    %slt0  = icmp slt i64 %secs, 0
    %ngt0  = icmp sgt i32 %nsecs, 0
    %isNP  = and i1 %slt0, %ngt0
    br i1 %isNP, label %caseNP, label %continue3

continue3:
    %sgt0  = icmp sgt i64 %secs, 0
    %nlt0  = icmp slt i32 %nsecs, 0
    %isPN  = and i1 %sgt0, %nlt0
    br i1 %isPN, label %casePN, label %everythingOK

everythingOK:
    ret void

nsecTooBig:
; | nsec >= 1000000000      = standardizeTime (LT (sec + 1) (nsec - 1000000000))
    %s0    = add i64 %secs, 1
    %ns0   = sub i32 %nsecs, 1000000000
    store i64 %s0, i64* %secp
    store i32 %ns0, i32* %nsecp
    br label %start

nsecTooSmall:
; | nsec <= (-1000000000)   = standardizeTime (LT (sec - 1) (nsec + 1000000000))
    %s1    = sub i64 %secs, 1
    %ns1   = add i32 %nsecs, 1000000000
    store i64 %s1, i64* %secp
    store i32 %ns1, i32* %nsecp
    br label %start

caseNP:
; | (sec < 0) && (nsec > 0) = standardizeTime (LT (sec + 1) (nsec - 1000000000))
    %s2    = add i64 %secs, 1
    %ns2   = sub i32 %nsecs, 1000000000
    store i64 %s2, i64* %secp
    store i32 %ns2, i32* %nsecp
    br label %start

casePN:
; | (sec > 0) && (nsec < 0) = standardizeTime (LT (sec - 1) (1000000000 + nsec))
    %s3    = sub i64 %secs, 1
    %ns3   = add i32 1000000000, %nsecs
    store i64 %s3, i64* %secp
    store i32 %ns3, i32* %nsecp
    br label %start
}


; INPUT: A base time, a time to add, and (optionally) a pointer to the result
;        structure.
; OUTPUT: The result of adding the first two times.
; SIDE EFFECTS: If you pass in a pointer as the third argument, its fields
;               will be replaced with the resulting values, and it will be
;               returned. If you pass NULL as the third argument, the result
;               structure will be allocated for you.
define ccc %TimeSpec* @addTime(%TimeSpec* %time1, %TimeSpec* %time2,
                               %TimeSpec* %inRes)
{
start:
    ; 1 second is 1,000,000,000 seconds, and an i32 can handle a bit over
    ; 2,000,000,000 values. So as long as the input values are simplified
    ; appropriately, we should be safe to just add the values together
    ; without worrying about overflow. However, let us be paranoid and do
    ; the simplification here, just in case.
    call void @standardizeTime(%TimeSpec* %time1)
    call void @standardizeTime(%TimeSpec* %time2)
    ; Yank all the data out of these structures
    %secp1  = getelementptr %TimeSpec* %time1, i32 0, TIMESPEC_FIELD_SECS
    %secp2  = getelementptr %TimeSpec* %time2, i32 0, TIMESPEC_FIELD_SECS
    %nsecp1 = getelementptr %TimeSpec* %time1, i32 0, TIMESPEC_FIELD_NSECS
    %nsecp2 = getelementptr %TimeSpec* %time2, i32 0, TIMESPEC_FIELD_NSECS
    %secs1  = load i64* %secp1
    %secs2  = load i64* %secp2
    %nsecs1 = load i32* %nsecp1
    %nsecs2 = load i32* %nsecp2
    ; naively add them together
    %secs   = add i64 %secs1, %secs2
    %nsecs  = add i32 %nsecs1, %nsecs2
    ; were we provided with an output pointer? If not, allocate one.
    %ris0   = icmp eq %TimeSpec* %inRes, null
    br i1 %ris0, label %allocateRes, label %finish

allocateRes:
    ; create the new structure and naively add them together
    %tssp   = getelementptr %TimeSpec* null, i32 1
    %tssize = ptrtoint %TimeSpec* %tssp to i64
    %ptr    = call i8* @malloc(i64 %tssize) 
    %retval = bitcast i8* %ptr to %TimeSpec*
    br label %finish

finish:
    %retptr = phi %TimeSpec* [%inRes, %start], [%retval, %allocateRes]
    %retsp  = getelementptr %TimeSpec* %retptr, i32 0, TIMESPEC_FIELD_SECS
    %retnsp = getelementptr %TimeSpec* %retptr, i32 0, TIMESPEC_FIELD_NSECS
    store i64 %secs, i64* %retsp
    store i32 %nsecs, i32* %retnsp
    ; simplify the new fellow and return him
    call void @standardizeTime(%TimeSpec* %retptr)
    ret %TimeSpec* %retptr
}

define ccc i64 @compareTime(%TimeSpec* %tm1, %TimeSpec* %tm2)
{
    call void @standardizeTime(%TimeSpec* %tm1)
    call void @standardizeTime(%TimeSpec* %tm2)

    %secp1  = getelementptr %TimeSpec* %tm1, i32 0, TIMESPEC_FIELD_SECS
    %secp2  = getelementptr %TimeSpec* %tm2, i32 0, TIMESPEC_FIELD_SECS
    %sec1   = load i64* %secp1
    %sec2   = load i64* %secp2
    %islt   = icmp slt i64 %sec1, %sec2
    br i1 %islt, label %lower, label %gte

gte:
    %isgt   = icmp sgt i64 %sec1, %sec2
    br i1 %isgt, label %greater, label %testns

testns:
    %nsecp1 = getelementptr %TimeSpec* %tm1, i32 0, TIMESPEC_FIELD_NSECS
    %nsecp2 = getelementptr %TimeSpec* %tm2, i32 0, TIMESPEC_FIELD_NSECS
    %nsec1  = load i32* %nsecp1
    %nsec2  = load i32* %nsecp2
    %isnlt  = icmp slt i32 %nsec1, %nsec2
    br i1 %isnlt, label %lower, label %ngte

ngte:
    %isngt  = icmp sgt i32 %nsec1, %nsec2
    br i1 %isngt, label %greater, label %equal

lower:
    ret i64 -1

equal:
    ret i64 0

greater:
    ret i64 1

}

define ccc %TimeSpec* @diffTime(%TimeSpec* %tm1, %TimeSpec* %tm2,
                                %TimeSpec* %inRes)
{
start:
    call void @standardizeTime(%TimeSpec* %tm1)
    call void @standardizeTime(%TimeSpec* %tm2)
    %ris0   = icmp eq %TimeSpec* %inRes, null
    br i1 %ris0, label %allocateRetval, label %finish

allocateRetval:
    ; generate the result value
    %tssp   = getelementptr %TimeSpec* null, i32 1
    %tssize = ptrtoint %TimeSpec* %tssp to i64
    %ptr    = call i8* @malloc(i64 %tssize) 
    %retval = bitcast i8* %ptr to %TimeSpec*
    br label %finish

finish:
    %retptr = phi %TimeSpec* [%retval, %allocateRetval], [%inRes, %start]
    %rsec   = getelementptr %TimeSpec* %retptr, i32 0, TIMESPEC_FIELD_SECS
    %rnsec  = getelementptr %TimeSpec* %retptr, i32 0, TIMESPEC_FIELD_NSECS
    ; get all the values we need.
    %s1p    = getelementptr %TimeSpec* %tm1, i32 0, TIMESPEC_FIELD_SECS
    %ns1p   = getelementptr %TimeSpec* %tm1, i32 0, TIMESPEC_FIELD_NSECS
    %s2p    = getelementptr %TimeSpec* %tm2, i32 0, TIMESPEC_FIELD_SECS
    %ns2p   = getelementptr %TimeSpec* %tm2, i32 0, TIMESPEC_FIELD_NSECS
    %bases1 = load i64* %s1p
    %bases2 = load i64* %s2p
    %basen1 = load i32* %ns1p
    %basen2 = load i32* %ns2p
    %secs   = sub i64 %bases1, %bases2
    %nsecs  = sub i32 %basen1, %basen2
    store i64 %secs, i64* %rsec
    store i32 %nsecs, i32* %rnsec
    call void @standardizeTime(%TimeSpec* %retptr)
    ret %TimeSpec* %retptr
}

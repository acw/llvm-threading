#include "system.llh"
#include "llvm.llh"
#include "queue.llh"
#include "sorted_list.llh"
#include "time.llh"

#include "machine-abi.h"

#define STACK_SAFETY_LAYER 128

%TCB         = type {
    %Stack  ; --> top of the stack, where we are right now
  , i8*     ; --> the bottom of the stack, used for freeing the stack later
  , %Queue* ; --> the people waiting for this thread in order to continue
  }

#define TCB_FIELD_STACK_TOP         0
#define TCB_FIELD_STACK_BOTTOM      1
#define TCB_FIELD_JOINED_THREADS    2

%ChanWaiter  = type { %TCB*, i8* }

#define WAITER_FIELD_THREAD         0
#define WAITER_FIELD_PTR            1

%SleepWaiter = type { %Ticks, %TCB* }

#define SLEEPER_FIELD_WAKEUP        0
#define SLEEPER_FIELD_THREAD        1

%Channel     = type {
    i8      ; --> State: 0 open, 1 reader waiting, 2 writer waiting
  , %Queue* ; --> Invalid in open state
            ;   | Queue of %TCBs/pointers in reader waiting state
            ;   | Queue of %TCBs in writer waiting state
  }

#define CHANNEL_FIELD_STATE         0
#define CHANNEL_FIELD_THREADS       1

#define CHANNEL_STATE_OPEN              0
#define CHANNEL_STATE_READER_WAITING    1
#define CHANNEL_STATE_WRITER_WAITING    2

%task = type void(i8*)

@running_queue  = internal global %Queue*    null
@sleeping_queue = internal global %SortList* null
@change_thrs_at = internal global %Ticks     0
@current_thread = internal global %TCB*      null
@original_stack = internal global %Stack     null

; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; System Initialization
;
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; create the main running task, and global queues
define coldcc void @run_threaded_system(%task* %t, i8* %val, i64 %stackSize)
{
    SAVE_CALLEE_SAVE_REGISTERS()
    ; jump into a helper function so that we come back here when the
    ; threaded system is done.
    call void @run_threaded_system2(%task* %t, i8* %val, i64 %stackSize)
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret void
}

define private void @run_threaded_system2(%task* %t, i8* %val, i64 %stackSize)
   naked
{
    %cur_s    = call %Stack @llvm.stacksave()
    store %Stack %cur_s, %Stack* @original_stack
    ; initialize the runing queue
    %queue    = call %Queue* @newQueue()
    store %Queue* %queue, %Queue** @running_queue
    ; initialize the sleeping queue
    %squeue   = call %SortList* @newSortedList(%Comparator* @compareSleepers)
    store %SortList* %squeue, %SortList** @sleeping_queue
    ; initialize the time to change threads
    %now      = call %Ticks @getTicks()
    %switchAt = add %Ticks %now, TICKS_PER_TIMESLICE
    store %Ticks %switchAt, %Ticks* @change_thrs_at
    ; initialize the current thread to nil for now.
    store %TCB* null, %TCB** @current_thread
    ; create the initial thread
    %tcb     = call %TCB* @alloc_tcb() ; the new thread object
    %s       = call %Stack @malloc(i64 %stackSize) ; the new stack
    %s_int   = ptrtoint %Stack %s to i64 ; as an integer
    %s_top   = add i64 %s_int, %stackSize
    %s_topm8 = sub i64 %s_top, STACK_SAFETY_LAYER
    %s_topp  = inttoptr i64 %s_topm8 to %Stack
    %tcbstt  = getelementptr %TCB* %tcb, i32 0, i32 TCB_FIELD_STACK_TOP
    %tcbstb  = getelementptr %TCB* %tcb, i32 0, i32 TCB_FIELD_STACK_BOTTOM
    store i8* %s_topp, %Stack* %tcbstt ; bang in the top of the stack
    store i8* %s, i8** %tcbstb ; bang in the bottom of the stack (for freeing)
    ; go!
    store %TCB* %tcb, %TCB** @current_thread
    call void @llvm.stackrestore(%Stack %s_topp)
    call void @start_thread(%task* %t, i8* %val)
    ret void ; probably will not get here
}

; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; External Functions
;
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; create_thread
;   INPUTS:
;             %t: The task (function) to start
;           %val: The value to pass to the function
;     %stackSize: The size of the stack to create for the thread (in bytes)
;
;   OUTPUTS:
;                 An object representing the newly-created thread.
;   SIDE EFFECTS:
;                 Creates a new thread and begins running it; in other words,
;                 the current thread will yield immediately to the new thread.
define ccc %TCB* @create_thread(%task* %t, i8* %val, i64 %stackSize)
{
    SAVE_CALLEE_SAVE_REGISTERS()
    ; create the new thread
    %tcb     = call %TCB* @alloc_tcb() ; the new thread object
    %s       = call %Stack @malloc(i64 %stackSize) ; the new stack
    %s_int   = ptrtoint %Stack %s to i64 ; as an integer
    %s_top   = add i64 %s_int, %stackSize
    %s_topm8 = sub i64 %s_top, STACK_SAFETY_LAYER
    %s_topp  = inttoptr i64 %s_topm8 to %Stack
    %tcbstt  = getelementptr %TCB* %tcb, i32 0, i32 TCB_FIELD_STACK_TOP
    %tcbstb  = getelementptr %TCB* %tcb, i32 0, i32 TCB_FIELD_STACK_BOTTOM
    store i8* %s_topp, %Stack* %tcbstt ; bang in the top of the stack
    store i8* %s, i8** %tcbstb ; bang in the bottom of the stack (for freeing)
    ; jump to the helper function (below) to save the current thread and switch
    ; to the new thread, so that when the original thread returns to this point
    call void @create_thread2(%task* %t, i8* %val, %TCB* %tcb)
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret %TCB* %tcb
}

define private void @create_thread2(%task* %t, i8* %val, %TCB* %tcb)
  noreturn naked
{
    ; save the stack
    %cur_s   = call %Stack @llvm.stacksave()
    %cur_t   = load %TCB** @current_thread
    %stackPP = getelementptr %TCB* %cur_t, i32 0, i32 TCB_FIELD_STACK_TOP
    store %Stack %cur_s, %Stack* %stackPP
    ; add the current thread object to the run queue and reset the current
    ; thread pointer to null
    %queue   = load %Queue** @running_queue
    call void @enqueueTCB(%Queue* %queue, %TCB* %cur_t)
    ; "restore" the stack and call into the function we want
    store %TCB* %tcb, %TCB** @current_thread
    %tcpstt  = getelementptr %TCB* %tcb, i32 0, i32 TCB_FIELD_STACK_TOP
    %stack   = load %Stack* %tcpstt
    call void @llvm.stackrestore(%Stack %stack)
    call void @start_thread(%task* %t, i8* %val)
    unreachable
}

; yield
;    INPUTS: none
;    OUTPUTS: none
;    SIDE EFFECTS:
;      Yields execution to the next thread in the run queue. If there are
;      no other threads available to run, will restart the current thread.
define coldcc void @yield()
{
    SAVE_CALLEE_SAVE_REGISTERS()
    ; jump into a helper function so we return here
    call void @yield2()
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret void
}

define private void @yield2() naked
{
    ; get the current stack and bang it into the structure
    %cur_s   = call %Stack @llvm.stacksave()
    %cur_t   = load %TCB** @current_thread
    %stackPP = getelementptr %TCB* %cur_t, i32 0, i32 TCB_FIELD_STACK_TOP
    store %Stack %cur_s, %Stack* %stackPP
    ; add the current thread object to the running queue
    %queue   = load %Queue** @running_queue
    call void @enqueueTCB(%Queue* %queue, %TCB* %cur_t)
    ; there is no currently running thread!
    store %TCB* null, %TCB** @current_thread
    call void @schedule()
    ret void
}

; maybeYield
;    INPUTS: none
;    OUTPUTS: none
;    SIDE EFFECTS:
;      Yields execution if the given thread has outlived its proposed
;      time slice.
define coldcc void @maybeYield()
{
    %now      = call %Ticks @getTicks()
    %switchAt = load %Ticks* @change_thrs_at
    %switch   = icmp uge %Ticks %now, %switchAt
    br i1 %switch, label %shouldReschedule, label %keepGoing

shouldReschedule:
    ; OK, recompute when to switch
    %newSwtch = add %Ticks %now, TICKS_PER_TIMESLICE
    store %Ticks %newSwtch, %Ticks* @change_thrs_at
    ; run the yield
    %cur_t   = load %TCB** @current_thread
    SAVE_CALLEE_SAVE_REGISTERS()
    call void @yield2()
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret void

keepGoing:
    ret void
}

; create_channel
;    INPUTS: none
;    OUTPUTS:
;       A new synchronous channel.
;    SIDE EFFECTS:
;       Allocates.
define %Channel* @create_channel()
{
    ; allocate and initialize the memory to zero
    %ptrChan = getelementptr %Channel* null, i32 1
    %szChan  = ptrtoint %Channel* %ptrChan to i64
    %ptr     = call i8* @malloc(i64 %szChan)
    call void @llvm.memset.p0i8.i64(i8* %ptr, i8 0, i64 %szChan, i32 1, i1 0)
    ; set the state
    %retval  = bitcast i8* %ptr to %Channel*
    %ptrst   = getelementptr %Channel* %retval, i32 0, i32 CHANNEL_FIELD_STATE
    store i8 CHANNEL_STATE_OPEN, i8* %ptrst
    ; allocate the thread queue and set the pointer
    %qptr    = getelementptr %Channel* %retval, i32 0, i32 CHANNEL_FIELD_THREADS
    %queue   = call %Queue* @newQueue()
    store %Queue* %queue, %Queue** %qptr
    ; return the appropriately-casted value
    ret %Channel* %retval
}

; send_channel
;    INPUTS:
;       %chan: The channel to send on
;        %val: The value to send on the channel.
;    OUTPUTS:
;       An error code:
;         0 = No error
;        -1 = Passed an invalid channel, or channel in an unknown state
;        -2 = Passed a corrupted channel (internal queue damage)
;    SIDE EFFECTS:
;       Blocks until another thread holding the channel performs a
;       recv_channel, and then transfers the data from the sending
;       thread to the receiving thread. If there is already a receiver
;       blocked waiting for a send, the transfer will happen immediately
;       and the sending thread will not block.
;
;       Channel sends and receives use a fair algorithm.
;
define coldcc i32 @send_channel(%Channel* %chan, i8* %val) naked
{
    %ptrst = getelementptr %Channel* %chan, i32 0, i32 CHANNEL_FIELD_STATE
    %state = load i8* %ptrst
    switch i8 %state, label %bad_chan [
       i8 CHANNEL_STATE_OPEN,           label %no_one_around
       i8 CHANNEL_STATE_READER_WAITING, label %reader_waiting
       i8 CHANNEL_STATE_WRITER_WAITING, label %writer_waiting
    ]

no_one_around:
    store i8 CHANNEL_STATE_WRITER_WAITING, i8* %ptrst ; update the state
    call void @addWaiterAndBlock(%Channel* %chan, i8* %val)
    ret i32 0

reader_waiting:
    ; grab the channel wait queue
    %qptr  = getelementptr %Channel* %chan, i32 0, i32 CHANNEL_FIELD_THREADS
    %queue = load %Queue** %qptr
    ; grab the first waiter from the queue
    %first = call i8* @dequeue(%Queue* %queue)
    %isBad = icmp eq i8* %first, null
    br i1 %isBad, label %bad_queue, label %good_queue

good_queue:
    ; OK, %first is non-null. Pull the value and the thread.
    %frstw  = bitcast i8* %first to %ChanWaiter*
    %frsttp = getelementptr %ChanWaiter* %frstw, i32 0, i32 WAITER_FIELD_THREAD
    %frstvp = getelementptr %ChanWaiter* %frstw, i32 0, i32 WAITER_FIELD_PTR
    %thread = load %TCB** %frsttp
    %vali8  = load i8** %frstvp
    %valp   = bitcast i8* %vali8 to i8**
    ; Free the waiter structure
    call void @free(i8* %first)
    ; Add the blocked thread back to the wait queue
    %tqueue = load %Queue** @running_queue
    call void @enqueueTCB(%Queue* %tqueue, %TCB* %thread)
    ; Write the value to the out value and return
    store i8* %val, i8** %valp
    ; Is this the last reader waiting for us?
    %count  = call i64 @queueLength(%Queue* %queue)
    %empty  = icmp eq i64 %count, 0
    br i1 %empty, label %nowEmpty, label %allDone

nowEmpty:
    ; The queue went from reader waiting to empty, so update the state
    store i8 CHANNEL_STATE_OPEN, i8* %ptrst
    ret i32 0

allDone:
    ret i32 0

bad_queue:
    ret i32 -2

writer_waiting:
    call void @addWaiterAndBlock(%Channel* %chan, i8* %val)
    ret i32 0

bad_chan:
    ret i32 -1
}

; recv_channel
;   INPUTS:
;     %chan: The channel to receive data on.
;     %valp: A pointer to a location to store the data.
;   OUTPUTS:
;     An error code:
;         0 = No error
;        -1 = Passed an invalid channel, or channel in an unknown state
;        -2 = Passed a corrupted channel (internal queue damage)
;   SIDE EFFECTS:
;     Blocks the current thread until another thread holding the channel
;     performs a channel send. At that point, the sent data will be written
;     to the location denoted by %valp. Alternatively, if there is a sender
;     blocked waiting for a receive, the value will be transferred immediately
;     and the receiving thread will not block.
;
;     Channel sends and receives use a fair algorithm.
;
define coldcc i32 @recv_channel(%Channel* %chan, i8** %valp)
{
    %ptrst = getelementptr %Channel* %chan, i32 0, i32 CHANNEL_FIELD_STATE
    %state = load i8* %ptrst
    switch i8 %state, label %bad_chan [
       i8 CHANNEL_STATE_OPEN,           label %no_one_around
       i8 CHANNEL_STATE_READER_WAITING, label %reader_waiting
       i8 CHANNEL_STATE_WRITER_WAITING, label %writer_waiting
    ]

no_one_around:
    store i8 CHANNEL_STATE_READER_WAITING, i8* %ptrst ; update the state
    %valp2 = bitcast i8** %valp to i8*
    call void @addWaiterAndBlock(%Channel* %chan, i8* %valp2)
    ret i32 0

reader_waiting:
    %valp3 = bitcast i8** %valp to i8*
    call void @addWaiterAndBlock(%Channel* %chan, i8* %valp3)
    ret i32 0

writer_waiting:
    ; grab the channel wait queue
    %qptr  = getelementptr %Channel* %chan, i32 0, i32 CHANNEL_FIELD_THREADS
    %queue = load %Queue** %qptr
    ; grab the first waiter from the queue
    %first = call i8* @dequeue(%Queue* %queue)
    %isBad = icmp eq i8* %first, null
    br i1 %isBad, label %bad_queue, label %good_queue

good_queue:
    ; OK, %first is non-null. Pull the value and the thread.
    %frstw  = bitcast i8* %first to %ChanWaiter*
    %frsttp = getelementptr %ChanWaiter* %frstw, i32 0, i32 WAITER_FIELD_THREAD
    %frstvp = getelementptr %ChanWaiter* %frstw, i32 0, i32 WAITER_FIELD_PTR
    %thread = load %TCB** %frsttp
    %val    = load i8** %frstvp
    ; Free the waiter structure
    call void @free(i8* %first)
    ; Add the blocked thread back to the wait queue
    %tqueue = load %Queue** @running_queue
    call void @enqueueTCB(%Queue* %tqueue, %TCB* %thread)
    ; Write the value to the out value and return
    store i8* %val, i8** %valp
    ; Is this the last writer waiting for us?
    %count  = call i64 @queueLength(%Queue* %queue)
    %empty  = icmp eq i64 %count, 0
    br i1 %empty, label %nowEmpty, label %allDone

nowEmpty:
    ; The queue went from writer waiting to empty, so update the state
    store i8 CHANNEL_STATE_OPEN, i8* %ptrst
    ret i32 0

allDone:
    ret i32 0

bad_queue:
    ret i32 -2

bad_chan:
    ret i32 -1
}

; thread_join
;   INPUTS
;     %thread: The thread to join.
;   OUTPUTS
;     None.
;   SIDE EFFECTS
;     Blocks the execution of the current thread until the passed thread
;     completes.
define coldcc void @thread_join(%TCB* %thread)
{
    SAVE_CALLEE_SAVE_REGISTERS()
    ; jump into a helper function so we return here
    call void @yield2()
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret void
}

define coldcc void @thread_join2(%TCB* %thread) naked
{
    ; get the current thread object
    %cur_t  = load %TCB** @current_thread
    ; get the current stack and bang it into the structure
    %cur_s  = call %Stack @llvm.stacksave()
    %stackp = getelementptr %TCB* %cur_t, i32 0, i32 TCB_FIELD_STACK_TOP
    store %Stack %cur_s, %Stack* %stackp
    ; there is no current thread!
    store %TCB* null, %TCB** @current_thread
    ; get the thread join list and add the formerly-current thread to it
    %jlptr  = getelementptr %TCB* %thread, i32 0, i32 TCB_FIELD_JOINED_THREADS
    %jlist  = load %Queue** %jlptr
    %tcbptr = bitcast %TCB* %cur_t to i8*
    call void @enqueue(%Queue* %jlist, i8* %tcbptr)
    ; and go to the next person
    call void @schedule()
    ret void
}

; sleep
;   INPUTS:
;     %microseconds: The number of microseconds to sleep for.
;   OUTPUTS:
;     None.
;   SIDE EFFECTS:
;     Blocks the current thread for at least the given number of microseconds.
;     Note that the threading system is not guaranteed to be microsecond-
;     accurate nor real time, so it is likely that the delay will be slightly
;     longer than requested.
define coldcc void @sleep(i64 %microseconds)
{
    SAVE_CALLEE_SAVE_REGISTERS()
    ; jump into a helper function so we return here
    call void @sleep2(i64 %microseconds)
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret void
}

define coldcc void @sleep2(i64 %microseconds) naked
{
    ; compute the size of a sleeper and allocate it
    %ptrsl  = getelementptr %SleepWaiter* null, i32 1
    %szsl   = ptrtoint %SleepWaiter* %ptrsl to i64
    %ptr    = call i8* @malloc(i64 %szsl)
    %ptrs   = bitcast i8* %ptr to %SleepWaiter*
    ; find the time to wake up and store it in the structure
    %sticks = call %Ticks @microsecondsToTicks(i64 %microseconds)
    %now    = call %Ticks @getTicks()
    %wakeAt = add %Ticks %sticks, %now
    %watptr = getelementptr %SleepWaiter* %ptrs, i32 0, i32 SLEEPER_FIELD_WAKEUP
    store %Ticks %wakeAt, %Ticks* %watptr
    ; grab the current thread object and update its stack
    %cur_t  = load %TCB** @current_thread
    %cur_s  = call %Stack @llvm.stacksave()
    %stackP = getelementptr %TCB* %cur_t, i32 0, i32 TCB_FIELD_STACK_TOP
    store %Stack %cur_s, %Stack* %stackP
    ; save the current thread object into the sleeper, and null out
    ; the current thread pointer.
    %sltptr = getelementptr %SleepWaiter* %ptrs, i32 0, i32 SLEEPER_FIELD_THREAD
    store %TCB* %cur_t, %TCB** %sltptr
    store %TCB* null, %TCB** @current_thread
    ; add ourselves to the sleeping queue
    %sleeps = load %SortList** @sleeping_queue
    call void @addSortListItem(%SortList* %sleeps, i8* %ptr)
    ; and reschedule
    call void @schedule()
    ret void
}

; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Simple Helper Functions
;
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


define private void @enqueueTCB(%Queue* %queue, %TCB* %tcb)
{
    %tcbi8 = bitcast %TCB* %tcb to i8*
    call void @enqueue(%Queue* %queue, i8* %tcbi8)
    ret void
}

define private %TCB* @dequeueTCB(%Queue* %queue)
{
    %tcbi8 = call i8* @dequeue(%Queue* %queue)
    %res   = bitcast i8* %tcbi8 to %TCB*
    ret %TCB* %res
}

define private %TCB* @alloc_tcb() {
    ; allocate and zero out the structure
    %ptr_tcb = getelementptr %TCB* null, i32 1
    %sz_tcb  = ptrtoint %TCB* %ptr_tcb to i64
    %ptr     = call i8* @malloc(i64 %sz_tcb)
    call void @llvm.memset.p0i8.i64(i8* %ptr, i8 0, i64 %sz_tcb, i32 1, i1 0)
    ; initialize the join list
    %tcb     = bitcast i8* %ptr to %TCB*
    %jlist   = call %Queue* @newQueue()
    %jlptr   = getelementptr %TCB* %tcb, i32 0, i32 TCB_FIELD_JOINED_THREADS
    store %Queue* %jlist, %Queue** %jlptr
    ; return the new TCB
    ret %TCB* %tcb
}

define private void @start_thread(%task* %t, i8* %data) noreturn
{
    ; run the body of the thread
    call void %t(i8* %data)
    ; hey, we are back. cool. find our join list.
    %cur_t   = load %TCB** @current_thread
    %jlptr   = getelementptr %TCB* %cur_t, i32 0, i32 TCB_FIELD_JOINED_THREADS
    %jlist   = load %Queue** %jlptr
    %rlist   = load %Queue** @running_queue
    br label %unwindJoinList

unwindJoinList:
    %jthread = call %TCB* @dequeueTCB(%Queue* %jlist)
    %done    = icmp eq %TCB* %jthread, null
    br i1 %done, label %cleanup, label %moveAndLoop

moveAndLoop:
    call void @enqueueTCB(%Queue* %rlist, %TCB* %jthread)
    br label %unwindJoinList

cleanup:
    ; cleanup the current thread
    %cur     = load %TCB** @current_thread
    %curi8   = bitcast %TCB* %cur to i8*
    %stackP  = getelementptr %TCB* %cur, i32 0, i32 TCB_FIELD_STACK_BOTTOM
    %stack   = load %Stack* %stackP
    call void @free(i8* %stack)
    call void @free(i8* %curi8)
    store %TCB* null, %TCB** @current_thread
    tail call void @schedule()
    unreachable
}

define private void @schedule() naked
{
    %queue   = load %Queue** @running_queue
    br label %start

start:
    call void @wakeReadySleepers()
    ; yank the next thread off the queue
    %next    = call %TCB* @dequeueTCB(%Queue* %queue)
    %nothr   = icmp eq %TCB* %next, null
    br i1 %nothr, label %emptyRunQueue, label %gotNextThread

emptyRunQueue:
    ; see if there is anyone sleeping we shld wait for.
    %sleeps  = load %SortList** @sleeping_queue
    %nextsi  = call i8* @getSortListItem(%SortList* %sleeps)
    %nosls   = icmp eq i8* %nextsi, null
    br i1 %nosls, label %emptySleepQueue, label %waitForSleepers

waitForSleepers:
    %nexts   = bitcast i8* %nextsi to %SleepWaiter*
    %tiltckp = getelementptr %SleepWaiter* %nexts, i32 0,
                             i32 SLEEPER_FIELD_WAKEUP
    %tiltck  = load %Ticks* %tiltckp
    call void @addSortListItem(%SortList* %sleeps, i8* %nextsi)
    call void @sleepUntil(%Ticks %tiltck)
    br label %start ; do this, because there may be more than one thread to
                    ; wake up, or because we might have returned early due
                    ; to a signal.

emptySleepQueue:
    ; we only get here if all our queues are empty, which means we are done
    %origst  = load %Stack* @original_stack
    call void @llvm.stackrestore(%Stack %origst)
    ret void

gotNextThread:
    ; set it as the next thread
    store %TCB* %next, %TCB** @current_thread
    ; restore its stack
    %stackP  = getelementptr %TCB* %next, i32 0, i32 TCB_FIELD_STACK_TOP
    %stack   = load %Stack* %stackP
    call void @llvm.stackrestore(%Stack %stack)
    ; return to its caller
    ret void
}

define private void @wakeReadySleepers() alwaysinline
{
    ; create a new SleepWaiter with the current time and a junk TCB
    %now    = call %Ticks @getTicks()
    %sptr   = alloca %SleepWaiter
    %sptri  = bitcast %SleepWaiter* %sptr to i8*
    %nowp   = getelementptr %SleepWaiter* %sptr, i32 0, i32 SLEEPER_FIELD_WAKEUP
    store %Ticks %now, %Ticks* %nowp
    ; grab the sleep queue
    %sleeps = load %SortList** @sleeping_queue
    br label %pullLoop

pullLoop:
    %nextpi = call i8* @getSortListItem(%SortList* %sleeps)
    %isNull = icmp eq i8* %nextpi, null
    br i1 %isNull, label %done, label %checkWakeTime

checkWakeTime:
    %compv  = call i8 @compareSleepers(i8* %nextpi, i8* %sptri)
    %keep   = icmp sle i8 %compv, 0
    br i1 %keep, label %promoteItem, label %returnItem

promoteItem:
    %nextp  = bitcast i8* %nextpi to %SleepWaiter*
    %tcbp   = getelementptr %SleepWaiter* %nextp, i32 0,
                            i32 SLEEPER_FIELD_THREAD
    %tcb    = load %TCB** %tcbp
    %rqueue = load %Queue** @running_queue
    call void @enqueueTCB(%Queue* %rqueue, %TCB* %tcb)
    call void @free(i8* %nextpi)
    br label %pullLoop

returnItem:
    call void @addSortListItem(%SortList* %sleeps, i8* %nextpi)
    br label %done

done:
    ret void
}

define private i8* @buildWaitStruct(%TCB* %cur_t, i8* %val)
{
    %ptr0    = getelementptr %ChanWaiter* null, i32 1
    %wsz     = ptrtoint %ChanWaiter* %ptr0 to i64
    %ptr1    = call i8* @malloc(i64 %wsz)
    %ptr2    = bitcast i8* %ptr1 to %ChanWaiter*
    %ptrTCB0 = getelementptr %ChanWaiter* %ptr2, i32 0, i32 WAITER_FIELD_THREAD
    %ptrVal0 = getelementptr %ChanWaiter* %ptr2, i32 0, i32 WAITER_FIELD_PTR
    store %TCB* %cur_t, %TCB** %ptrTCB0
    store i8* %val, i8** %ptrVal0
    ret i8* %ptr1
}

; this needs to be no-inline, so that when we return to the current thread
; when the receive or send happens, we "return" back to the main body of the
; calling function
define private void @addWaiterAndBlock(%Channel* %chan, i8* %val)
{
    SAVE_CALLEE_SAVE_REGISTERS()
    ; jump into a helper function so we return here
    call void @addWaiterAndBlock2(%Channel* %chan, i8* %val)
    RESTORE_CALLEE_SAVE_REGISTERS()
    ret void
}

define private void @addWaiterAndBlock2(%Channel* %chan, i8* %val)
   noinline naked
{
    ; get the current thread object
    %cur_t   = load %TCB** @current_thread
    ; get the current stack and bang it into the structure
    %cur_s   = call %Stack @llvm.stacksave()
    %stackPP = getelementptr %TCB* %cur_t, i32 0, i32 TCB_FIELD_STACK_TOP
    store %Stack %cur_s, %Stack* %stackPP
    ; Build a waiting structure
    %wstrct  = call i8* @buildWaitStruct(%TCB* %cur_t, i8* %val)
    ; Get the current wait queue and add ourselves to it
    %qptr  = getelementptr %Channel* %chan, i32 0, i32 CHANNEL_FIELD_THREADS
    %queue = load %Queue** %qptr
    call void @enqueue(%Queue* %queue, i8* %wstrct)
    ; schedule the next action
    call void @schedule()
    ret void
}

define private i8 @compareSleepers(i8* %sleep1i, i8* %sleep2i)
{
    %sleep1 = bitcast i8* %sleep1i to %SleepWaiter*
    %sleep2 = bitcast i8* %sleep2i to %SleepWaiter*
    %time1p = getelementptr %SleepWaiter* %sleep1, i32 0,
                            i32 SLEEPER_FIELD_WAKEUP
    %time2p = getelementptr %SleepWaiter* %sleep2, i32 0,
                            i32 SLEEPER_FIELD_WAKEUP
    %time1  = load %Ticks* %time1p
    %time2  = load %Ticks* %time2p
    %comp1  = icmp ult %Ticks %time1, %time2
    br i1 %comp1, label %lesst, label %greaterequal
lesst:
    ret i8 -1
greaterequal:
    %comp2  = icmp eq %Ticks %time1, %time2
    br i1 %comp2, label %equal, label %greater
equal:
    ret i8 0
greater:
    ret i8 1
}
